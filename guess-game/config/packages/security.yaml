security:
  encoders:
    Guess\Domain\Player\Player:
      algorithm: bcrypt

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    users:
      entity:
        # the class of the entity that represents users
        class: 'Guess\Domain\Player\Player'
        # the property to query by - e.g. username, email, etc
        property: 'username'
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/login
      stateless: true
      anonymous: true
      json_login:
        check_path: /login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    register:
      pattern: ^/api/players
      stateless: true
      anonymous: true

    games:
      pattern: ^/api/games
      stateless: true
      anonymous: true

    top-players:
      pattern: ^/api/top-players
      stateless: true
      anonymous: true

    api:
      pattern: ^/api
      stateless: true
      provider: users
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator


      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/players, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/top-players, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/games, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
